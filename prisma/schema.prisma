// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Admin panel users

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  email     String     @unique
  name      String?
  password  String
  secret    String?
  salt      String
  verified  Boolean
  role      Role       @default(GUEST)
  sessions  Session[]
 
  tartan    Tartan?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

enum Role {
  GUEST
  MEMBER
  PUBLISHER
  DEVELOPER
  ADMIN
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  token     String   @unique
  valid     Boolean  @default(false)
  userAgent String?
  language  String?
  referer   String?
  isMobile  Boolean?
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

// BasicInfo

model Tartan {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  user    User    @relation(fields: [userId], references: [id])
  userId  String  @unique @db.ObjectId
  pattern String?
  hashed  String?
  url     String?
}

// Players and game models

enum AccountType {
  PREMIUM
  COMMON
}

model TelegramAccount {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  username  String    @map("user_name")
  tgId      String    @unique @map("tg_id")
  createdAt DateTime? @default(now()) @map("created_at")
  isPremium Boolean   @map("is_premium")
  imageUrl  String?   @map("image_url")

  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  player Player?

  @@map("tg_account")
}

model Player {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt DateTime? @default(now()) @map("created_at")
  active    Boolean   @default(true) @map("active")

  lastLogin DateTime? @map("last_login")

  token PlayerTokens?

  invitedById      String?  @map("invited_by_id") @db.ObjectId
  invitedBy        Player?  @relation("UserInvitations", fields: [invitedById], references: [id], onDelete: NoAction, onUpdate: NoAction)
  invitations      Player[] @relation("UserInvitations")
  referralCode     String   @unique
  referrerRewarded Boolean  @default(false)

  tasks        TaskInstance[]
  taskDatetime DateTime?      @map("task_datetime")

  unsafe Boolean @default(false)

  tgAccount   TelegramAccount @relation(fields: [tgAccountId], references: [id])
  tgAccountId String          @unique @map("tg_account_id") @db.ObjectId

  balance   PlayerBalance? @relation(fields: [balanceId], references: [id])
  balanceId String?        @unique @map("balance_id") @db.ObjectId

  actions  ActionInstance[] @relation("PlayerActions") // Все действия, совершенные игроком
  received ActionInstance[] @relation("TargetActions") // Все действия, направленные на игрока

  location LocationInstance?  @relation("PlayerLocation")

  @@map("player")
}

model PlayerBalance {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  player Player?

  coins    Int @default(999)
  gems     Int @default(9)
  crystals Int @default(3)

  energyLatest     Int       @default(333) @map("energy_latest")
  energyMax        Int       @default(333) @map("energy_max")
  // Скорость восстановления энергии в единицах/секундах
  recoveryRate     Int       @default(1) @map("recovery_rate")
  // Время последнего обновления энергии
  lastEnergyUpdate DateTime? @default(now()) @map("last_energy_update")

  lastGemReady     DateTime? @default(now())  @map("last_gem_ready")
  lastCrystalReady DateTime? @default(now())  @map("last_crystal_ready")

  playerTgId String @map("player_tg_id")

  @@map("balance")
}

model Referral {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  referrerId String   @db.ObjectId
  referredId String   @db.ObjectId
  createdAt  DateTime @default(now())

  ReferralDay ReferralDay[]

  @@map("refferal")
}

model ReferralDay {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  referralId    String   @db.ObjectId
  day           DateTime @map("day") // Дата, когда произошла регистрация (используем московское время)
  registrations Int      @default(1) // Количество регистраций в этот день
  createdAt     DateTime @default(now())

  referral Referral @relation(fields: [referralId], references: [id], onDelete: Cascade)

  @@map("referral_day")
}

model PlayerTokens {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  accessToken  String?
  refreshToken String?
  createdAt    DateTime? @default(now()) @map("created_at")
  updatedAt    DateTime? @updatedAt @map("updated_at")
  player       Player    @relation(fields: [playerId], references: [id])
  playerId     String    @unique @db.ObjectId

  @@map("player_tokens")
}

model Task {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  type        TaskType
  baunty      Int?
  bonus       Int?
  target      Int?
  content     String?
  navigate    String?
  expiresAt   DateTime?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isDaily     Boolean
  playerTasks TaskInstance[]

  @@map("task")
}

model TaskInstance {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  templateTask   Task?      @relation(fields: [templateTaskId], references: [id])
  templateTaskId String?    @db.ObjectId
  player         Player?    @relation(fields: [playerId], references: [id])
  playerId       String?    @db.ObjectId
  status         TaskStatus @default(PENDING)
  progress       Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  finishedAt     DateTime?

  @@map("task_instance")
}

enum TaskType {
  SUBSCRIBE_CHANNEL
  INVITE_COUNT
  INVITE_PREMIUM_COUNT
  INVITE_EVERY_DAY
  DAILY_BAUNTY
  DAILY_MINIGAME
  TAPS_COUNT
  DAILY_GAMEPLAY_ACTION
  DAILY_TON_CHECKIN
  CONNECT_WALLET
  MAKE_TEST_TRANSACTION
  BYBIT_REGISTRATION
  BYBIT_DEPOSIT
  BYBIT_KYC
  OKX_REGISTRATION
  OKX_DEPOSIT
  OKX_KYC
  SHARE_STORY
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  READY
  COMPLETED
}

// Активные действия игрока

model Action {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  price   ResourceCost? @relation(fields: [priceId], references: [id])
  priceId String?       @db.ObjectId

  effect   ResourceEffect? @relation(fields: [effectid], references: [id])
  effectid String?         @db.ObjectId

  type      ActionType
  timestamp DateTime    @default(now())

  instances ActionInstance[]

  @@map("action_template")
}

model ActionInstance {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  player   Player @relation("PlayerActions", fields: [playerId], references: [id]) // Инициатор действия
  playerId String @db.ObjectId

  target   Player? @relation("TargetActions", fields: [targetId], references: [id]) // Получатель действия (опционально)
  targetId String? @db.ObjectId

  template   Action @relation(fields: [templateId], references: [id])
  templateId String @db.ObjectId

  key        String?

  createdAt DateTime @default(now())

  uuid String @unique

  @@map("action_instance")
}

enum ActionType {
  FLIRT
  BAWDRY
  KINDNESS
  ATTACK
  HELP
  TRADE
}

enum ResourceType {
  SILVER
  ENERGY
  GEMS
  CRYSTALS
}

enum EffectType {
  INCREASING
  DECREASING
  SET
}

model ResourceCost {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  resource   ResourceType // Тип ресурса: серебро, энергия и т.д.
  value      Int // Чистое значение
  percentage Float? // Процентное значение (опционально)
  Action     Action[]

  @@map("resource_cost")
}

model ResourceEffect {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  resource   ResourceType // Тип ресурса: серебро, энергия и т.д.
  effect     EffectType
  value      Int // Чистое значение
  percentage Float? // Процентное значение (опционально)
  Action     Action[]

  @@map("resource_effect")
}

model LocationCost {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  resource   ResourceType // Тип ресурса: серебро, энергия и т.д.
  value      Int // Чистое значение
  percentage Float? // Процентное значение (опционально)
  location   Location[]

  @@map("location_cost")
}

model LocationEffect {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  resource   ResourceType // Тип ресурса: серебро, энергия и т.д.
  effect     EffectType
  value      Int // Чистое значение
  percentage Float? // Процентное значение (опционально)
  location   Location[]

  @@map("location_effect")
}

model Location {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  price   LocationCost?   @relation(fields: [priceId], references: [id])
  priceId String?         @db.ObjectId

  effect   LocationEffect? @relation(fields: [effectid], references: [id])
  effectid String?         @db.ObjectId

  type      LocationType 
  timestamp DateTime    @default(now())

  instances LocationInstance[]
  @@map("location")
}

model LocationInstance {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  player   Player @relation("PlayerLocation", fields: [playerId], references: [id]) 

  playerId String @db.ObjectId @unique

  template   Location @relation(fields: [templateId], references: [id])
  templateId String @db.ObjectId

  createdAt DateTime @default(now())
  @@map("location_instance")
}

enum LocationType {
  CROSSROADS_ZERO
  MARKUS_ROOM
  AGATA_ROOM
}

